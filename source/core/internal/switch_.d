module core.internal.switch_;
import core.internal.exception;
import rt.cmp;

/**
Support for switch statements switching on strings.
Params:
    caseLabels = sorted array of strings generated by compiler. Note the
        strings are sorted by length first, and then lexicographically.
    condition = string to look up in table
Returns:
    index of match in caseLabels, a negative integer if not found
*/
int __switch(T, caseLabels...)( /*in*/ const scope T[] condition) pure nothrow @safe @nogc {
    // This closes recursion for other cases.
    static if (caseLabels.length == 0) {
        return int.min;
    } else static if (caseLabels.length == 1) {
        return __cmp(condition, caseLabels[0]) == 0 ? 0 : int.min;
    } // To be adjusted after measurements
    // Compile-time inlined binary search.
    else static if (caseLabels.length < 7) {
        int r = void;
        enum mid = cast(int) caseLabels.length / 2;
        if (condition.length == caseLabels[mid].length) {
            r = __cmp(condition, caseLabels[mid]);
            if (r == 0)
                return mid;
        } else {
            // Equivalent to (but faster than) condition.length > caseLabels[$ / 2].length ? 1 : -1
            r = ((condition.length > caseLabels[mid].length) << 1) - 1;
        }

        if (r < 0) {
            // Search the left side
            return __switch!(T, caseLabels[0 .. mid])(condition);
        } else {
            // Search the right side
            return __switch!(T, caseLabels[mid + 1 .. $])(condition) + mid + 1;
        }
    } else {
        // Need immutable array to be accessible in pure code, but case labels are
        // currently coerced to the switch condition type (e.g. const(char)[]).
        pure @trusted nothrow @nogc asImmutable(scope const(T[])[] items) {
            assert(__ctfe); // only @safe for CTFE
            immutable T[][caseLabels.length] result = cast(immutable)(items[]);
            return result;
        }

        static immutable T[][caseLabels.length] cases = asImmutable([caseLabels]);

        // Run-time binary search in a static array of labels.
        return __switchSearch!T(cases[], condition);
    }
}

// binary search in sorted string cases, also see `__switch`.
private int __switchSearch(T)( /*in*/ const scope T[][] cases, /*in*/ const scope T[] condition) pure nothrow @safe @nogc {
    size_t low = 0;
    size_t high = cases.length;

    do {
        auto mid = (low + high) / 2;
        int r = void;
        if (condition.length == cases[mid].length) {
            r = __cmp(condition, cases[mid]);
            if (r == 0)
                return cast(int) mid;
        } else {
            // Generates better code than "expr ? 1 : -1" on dmd and gdc, same with ldc
            r = ((condition.length > cases[mid].length) << 1) - 1;
        }

        if (r > 0)
            low = mid + 1;
        else
            high = mid;
    }
    while (low < high);

    // Not found
    return -1;
}